# Generated by Django 5.2.6 on 2025-10-17 17:25

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=50, unique=True)),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['category_name'],
            },
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subcategory_name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='offers.category')),
            ],
            options={
                'verbose_name': 'SubCategory',
                'verbose_name_plural': 'SubCategories',
                'ordering': ['subcategory_name'],
                'unique_together': {('category', 'subcategory_name')},
            },
        ),
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand_name', models.CharField(max_length=100)),
                ('prefix', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, help_text='Optional: describe the offer', null=True)),
                ('batch_size', models.PositiveIntegerField(default=1, help_text='Number of unique vouchers to generate. Set to 1 if all codes should be the same.')),
                ('discount_percent', models.PositiveIntegerField(blank=True, null=True)),
                ('start_date', models.DateTimeField(help_text='Time and date from when the offer will begin')),
                ('end_date', models.DateTimeField(help_text='Time and date until when the offer will be valid')),
                ('usage_type', models.CharField(choices=[('single', 'Single Use'), ('multi', 'Multi Use')], default='multi', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('max_uses', models.PositiveIntegerField(blank=True, help_text='Max total uses across all partners (null = unlimited)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('brand_url', models.URLField(help_text='External website where coupon can be used')),
                ('auto_voucher_generation', models.BooleanField(default=False, help_text='If checked voucher(s) generate automatically. Otherwise, you must create Voucher for this offer manually,')),
                ('max_vouchers_per_user', models.PositiveIntegerField(default=1, help_text='Maximum vouchers a user can reserve from this offer')),
                ('voucher_cooldown_hours', models.PositiveIntegerField(default=24, help_text='Hours a user must wait before reserving another voucher (default: 24)')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offer_user', to=settings.AUTH_USER_MODEL)),
                ('subcategory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offers', to='offers.subcategory')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Voucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coupon', models.CharField(max_length=128, unique=True, validators=[django.core.validators.MinLengthValidator(8)])),
                ('claimed', models.BooleanField(default=False, help_text='Has this voucher been revealed/used by a customer')),
                ('claimed_at', models.DateTimeField(blank=True, help_text='When the voucher code was first revealed to the user', null=True)),
                ('claimed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user', to=settings.AUTH_USER_MODEL)),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vouchers', to='offers.offer')),
            ],
            options={
                'verbose_name': 'Voucher Code',
                'verbose_name_plural': 'Voucher Codes',
                'ordering': ['offer', 'coupon'],
            },
        ),
        migrations.CreateModel(
            name='VoucherReservationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('claimed_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voucher_reservations', to=settings.AUTH_USER_MODEL)),
                ('voucher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservation_logs', to='offers.voucher')),
            ],
            options={
                'ordering': ['-claimed_at'],
            },
        ),
        migrations.AddIndex(
            model_name='voucher',
            index=models.Index(fields=['offer'], name='offers_vouc_offer_i_2ecc18_idx'),
        ),
        migrations.AddIndex(
            model_name='voucher',
            index=models.Index(fields=['claimed_at'], name='offers_vouc_claimed_310cbb_idx'),
        ),
        migrations.AddIndex(
            model_name='voucher',
            index=models.Index(fields=['claimed'], name='offers_vouc_claimed_4ec063_idx'),
        ),
        migrations.AddIndex(
            model_name='voucherreservationlog',
            index=models.Index(fields=['user', 'voucher', 'claimed_at'], name='offers_vouc_user_id_a62485_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='voucherreservationlog',
            unique_together={('user', 'voucher')},
        ),
    ]
